using System.Collections.Generic;
using System.IO;

using AM.IO;
using AM.Text;

using JetBrains.Annotations;

using ManagedIrbis;
using ManagedIrbis.Infrastructure;

using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTests.ManagedIrbis.Infrastructure
{
    [TestClass]
    public class ServerResponseTest
    {
        [NotNull]
        private byte[] _GetAnswer()
        {
            return new byte[]
            {
                0x48, 0x0D, 0x0A, 0x32, 0x32, 0x32, 0x38, 0x38, 0x34, 0x0D,
                0x0A, 0x35, 0x0D, 0x0A, 0x31, 0x30, 0x35, 0x36, 0x0D, 0x0A,
                0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A,
                0x0D, 0x0A, 0x2D, 0x32, 0x30, 0x32, 0x0D, 0x0A, 0x31, 0x23,
                0x41, 0x3D, 0x31, 0x31, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D,
                0x41, 0x4C, 0x46, 0x41, 0x52, 0x4F, 0x2C, 0x20, 0x52, 0x2E,
                0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0x42, 0x49, 0x42, 0x4F,
                0x4C, 0x45, 0x54, 0x2C, 0x20, 0x4A, 0x41, 0x4E, 0x2D, 0x43,
                0x4C, 0x41, 0x55, 0x44, 0x45, 0x0D, 0x0A, 0x31, 0x23, 0x41,
                0x3D, 0x42, 0x52, 0x59, 0x41, 0x4E, 0x54, 0x2C, 0x20, 0x52,
                0x2E, 0x20, 0x4D, 0x2E, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D,
                0x43, 0x48, 0x41, 0x47, 0x41, 0x4E, 0x54, 0x49, 0x2C, 0x20,
                0x52, 0x2E, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0x44, 0x4F,
                0x55, 0x47, 0x48, 0x45, 0x52, 0x54, 0x59, 0x2C, 0x20, 0x43,
                0x2E, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0x48, 0x41, 0x59,
                0x44, 0x4E, 0x2C, 0x20, 0x4A, 0x4F, 0x53, 0x45, 0x50, 0x48,
                0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0x4A, 0x4F, 0x53, 0x45,
                0x50, 0x48, 0x2C, 0x20, 0x48, 0x41, 0x4A, 0x44, 0x4E, 0x0D,
                0x0A, 0x31, 0x23, 0x41, 0x3D, 0x4B, 0x52, 0x4F, 0x4C, 0x2C,
                0x20, 0x45, 0x2E, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0x4D,
                0x55, 0x53, 0x53, 0x45, 0x54, 0x0D, 0x0A, 0x31, 0x23, 0x41,
                0x3D, 0x4D, 0x55, 0x53, 0x53, 0x45, 0x54, 0x2C, 0x20, 0x4C,
                0x55, 0x53, 0x49, 0x45, 0x4E, 0x0D, 0x0A, 0x36, 0x23, 0x41,
                0x3D, 0x50, 0x2E, 0x2C, 0x20, 0x54, 0x43, 0x48, 0x41, 0x49,
                0x4B, 0x4F, 0x56, 0x53, 0x4B, 0x59, 0x0D, 0x0A, 0x31, 0x23,
                0x41, 0x3D, 0x50, 0x45, 0x4E, 0x52, 0x4F, 0x53, 0x45, 0x2C,
                0x20, 0x52, 0x2E, 0x0D, 0x0A, 0x32, 0x23, 0x41, 0x3D, 0x50,
                0x45, 0x52, 0x52, 0x4F, 0x4E, 0x45, 0x2C, 0x20, 0x50, 0x41,
                0x55, 0x4C, 0x20, 0x4A, 0x2E, 0x0D, 0x0A, 0x31, 0x23, 0x41,
                0x3D, 0x52, 0x59, 0x42, 0x41, 0x4B, 0x4F, 0x56, 0x2C, 0x20,
                0x41, 0x4E, 0x41, 0x54, 0x4F, 0x4C, 0x49, 0x4A, 0x0D, 0x0A,
                0x33, 0x23, 0x41, 0x3D, 0x53, 0x48, 0x4F, 0x52, 0x54, 0x2C,
                0x20, 0x4D, 0x2E, 0x20, 0x57, 0x2E, 0x0D, 0x0A, 0x31, 0x23,
                0x41, 0x3D, 0x56, 0x45, 0x4E, 0x4B, 0x41, 0x54, 0x41, 0x2C,
                0x20, 0x53, 0x2E, 0x52, 0x2E, 0x20, 0x28, 0x4B, 0x52, 0x49,
                0x53, 0x48, 0x4E, 0x41, 0x29, 0x0D, 0x0A, 0x31, 0x23, 0x41,
                0x3D, 0x57, 0x41, 0x4E, 0x43, 0x5A, 0x55, 0x52, 0x41, 0x2C,
                0x20, 0x41, 0x52, 0x4E, 0x4F, 0x53, 0x54, 0x20, 0x5B, 0x45,
                0x52, 0x4E, 0x45, 0x53, 0x54, 0x5D, 0x20, 0x28, 0x42, 0x41,
                0x52, 0x4F, 0x4E, 0x20, 0x44, 0x45, 0x29, 0x0D, 0x0A, 0x31,
                0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x91, 0xD0, 0x9E, 0xD0,
                0x9B, 0xD0, 0x98, 0xD0, 0x9C, 0xD0, 0x9E, 0xD0, 0x92, 0x2C,
                0x20, 0xD0, 0x9F, 0x2E, 0x20, 0x5C, 0xD0, 0x9B, 0xD0, 0x98,
                0xD0, 0x91, 0xD0, 0xA0, 0x2E, 0x5C, 0x0D, 0x0A, 0x31, 0x23,
                0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x92, 0xD0, 0xA2, 0xD0, 0x9E,
                0xD0, 0x9D, 0xD0, 0x9E, 0xD0, 0x9C, 0xD0, 0x9E, 0xD0, 0x92,
                0x2C, 0x20, 0xD0, 0x92, 0x2E, 0x20, 0xD0, 0xA1, 0x2E, 0x0D,
                0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x92, 0xD0,
                0xA2, 0xD0, 0x9E, 0xD0, 0x9D, 0xD0, 0x9E, 0xD0, 0x9C, 0xD0,
                0x9E, 0xD0, 0x92, 0x2C, 0x20, 0xD0, 0x92, 0x2E, 0x20, 0xD0,
                0xA1, 0x2E, 0x5C, 0xD0, 0xA0, 0xD0, 0x95, 0xD0, 0x94, 0x2E,
                0x5C, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0,
                0x93, 0xD0, 0x90, 0xD0, 0x9F, 0xD0, 0x9E, 0xD0, 0x92, 0xD0,
                0x90, 0x2C, 0x20, 0xD0, 0xA2, 0x2E, 0x20, 0xD0, 0x90, 0x2E,
                0x0D, 0x0A, 0x32, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x97,
                0xD0, 0x91, 0xD0, 0xA3, 0xD0, 0x9A, 0xD0, 0x98, 0xD0, 0x9D,
                0xD0, 0x90, 0x2C, 0x20, 0xD0, 0x97, 0x2E, 0x20, 0xD0, 0x9C,
                0x2E, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0,
                0x9A, 0xD0, 0x9C, 0xD0, 0x90, 0xD0, 0x9D, 0xD0, 0x9E, 0xD0,
                0x92, 0x2C, 0x20, 0xD0, 0xA1, 0x2E, 0x20, 0xD0, 0xA1, 0x2E,
                0x0D, 0x0A, 0x32, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x9A,
                0xD0, 0xA3, 0xD0, 0x9B, 0xD0, 0x9E, 0xD0, 0x92, 0xD0, 0x90,
                0x2C, 0x20, 0xD0, 0x97, 0x2E, 0x20, 0xD0, 0x9C, 0x2E, 0x0D,
                0x0A, 0x32, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x9A, 0xD0,
                0xA3, 0xD0, 0x9B, 0xD0, 0x9E, 0xD0, 0x92, 0xD0, 0x90, 0x2C,
                0x20, 0xD0, 0x97, 0x2E, 0x20, 0xD0, 0x9C, 0x2E, 0x5C, 0xD0,
                0xA0, 0xD0, 0x95, 0xD0, 0x94, 0x2E, 0x5C, 0x0D, 0x0A, 0x33,
                0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x9A, 0xD0, 0xA3, 0xD0,
                0x9D, 0xD0, 0x98, 0xD0, 0x9D, 0x2C, 0x20, 0xD0, 0x91, 0x2E,
                0x0D, 0x0A, 0x32, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x9A,
                0xD0, 0xA3, 0xD0, 0x9D, 0xD0, 0x98, 0xD0, 0x9D, 0x2C, 0x20,
                0xD0, 0x91, 0xD0, 0x9E, 0xD0, 0xA0, 0xD0, 0x98, 0xD0, 0xA1,
                0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x9B,
                0xD0, 0x91, 0xD0, 0x9E, 0xD0, 0xA0, 0xD0, 0x9E, 0xD0, 0x92,
                0x2C, 0x20, 0xD0, 0xA0, 0xD0, 0x9E, 0xD0, 0x9B, 0xD0, 0x90,
                0xD0, 0x9D, 0x20, 0xD0, 0x90, 0xD0, 0xA0, 0xD0, 0xA5, 0xD0,
                0x98, 0xD0, 0x9F, 0xD0, 0x9E, 0xD0, 0x92, 0xD0, 0x98, 0xD0,
                0xA7, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0,
                0x9B, 0xD0, 0x95, 0xD0, 0x9A, 0xD0, 0xA1, 0xD0, 0x90, 0xD0,
                0xA5, 0xD0, 0x98, 0xD0, 0x9D, 0x2C, 0x20, 0xD0, 0xA0, 0xD0,
                0xA3, 0xD0, 0x94, 0xD0, 0x9E, 0xD0, 0x9B, 0xD0, 0xAC, 0xD0,
                0xA4, 0x20, 0xD0, 0x9C, 0xD0, 0x98, 0xD0, 0xA5, 0xD0, 0x90,
                0xD0, 0x99, 0xD0, 0x9B, 0xD0, 0x9E, 0xD0, 0x92, 0xD0, 0x98,
                0xD0, 0xA7, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90,
                0xD0, 0x9B, 0xD0, 0x95, 0xD0, 0xA8, 0xD0, 0x98, 0xD0, 0x9D,
                0xD0, 0x90, 0x2C, 0x20, 0xD0, 0xA2, 0x2E, 0x20, 0xD0, 0x9F,
                0x2E, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0,
                0x9B, 0xD0, 0x95, 0xD0, 0xA8, 0xD0, 0x98, 0xD0, 0x9D, 0xD0,
                0x90, 0x2C, 0x20, 0xD0, 0xA2, 0x2E, 0x20, 0xD0, 0x9F, 0x2E,
                0x5C, 0xD0, 0xA0, 0xD0, 0x95, 0xD0, 0x94, 0x2E, 0x5C, 0x0D,
                0x0A, 0x34, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x9B, 0xD0,
                0x98, 0xD0, 0x95, 0xD0, 0x92, 0x2C, 0x20, 0xD0, 0xAE, 0xD0,
                0xA0, 0xD0, 0x98, 0xD0, 0x99, 0x2D, 0xD0, 0x98, 0xD0, 0x9E,
                0xD0, 0xA1, 0xD0, 0x98, 0xD0, 0xA4, 0x20, 0xD0, 0xAE, 0xD0,
                0xA0, 0xD0, 0xAC, 0xD0, 0x95, 0xD0, 0x92, 0xD0, 0x98, 0xD0,
                0xA7, 0x5C, 0xD0, 0xA1, 0xD0, 0x9E, 0xD0, 0xA1, 0xD0, 0xA2,
                0x2E, 0x5C, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90,
                0xD0, 0x9D, 0xD0, 0x90, 0xD0, 0x9D, 0xD0, 0xAC, 0xD0, 0x98,
                0xD0, 0x9D, 0x2C, 0x20, 0xD0, 0x9E, 0x2E, 0x20, 0xD0, 0x98,
                0x2E, 0x0D, 0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0,
                0x9D, 0xD0, 0x90, 0xD0, 0x9D, 0xD0, 0xAC, 0xD0, 0x98, 0xD0,
                0x9D, 0x2C, 0x20, 0xD0, 0x9E, 0x2E, 0x20, 0xD0, 0x98, 0x2E,
                0x5C, 0xD0, 0xA0, 0xD0, 0x95, 0xD0, 0x94, 0x2E, 0x5C, 0x0D,
                0x0A, 0x31, 0x23, 0x41, 0x3D, 0xD0, 0x90, 0xD0, 0x9D, 0xD0,
                0x90, 0xD0, 0xA8, 0xD0, 0x9A, 0xD0, 0x98, 0xD0, 0x9D, 0x2C,
                0x20, 0xD0, 0x90, 0x2E, 0x20, 0xD0, 0x92, 0x2E, 0x0D, 0x0A
            };
        }

        [NotNull]
        private byte[] _GetRequest()
        {
            return new byte[]
            {
                0x31, 0x31, 0x38, 0x0A, 0x47, 0x0A, 0x43, 0x0A, 0x47, 0x0A,
                0x32, 0x32, 0x32, 0x38, 0x38, 0x34, 0x0A, 0x36, 0x38, 0x0A,
                0x31, 0x0A, 0x31, 0x0A, 0x0A, 0x0A, 0x0A, 0x49, 0x42, 0x49,
                0x53, 0x0A, 0x40, 0x4B, 0x4E, 0x5F, 0x48, 0x0A, 0x2D, 0x32,
                0x0A, 0x30, 0x23, 0x30, 0x1F, 0x1E, 0x30, 0x23, 0x30, 0x1F,
                0x1E, 0x39, 0x32, 0x30, 0x23, 0x50, 0x41, 0x5A, 0x4B, 0x1F,
                0x1E, 0x39, 0x30, 0x30, 0x23, 0x5E, 0x42, 0x30, 0x35, 0x1F,
                0x1E, 0x31, 0x30, 0x32, 0x23, 0x52, 0x55, 0x1F, 0x1E, 0x31,
                0x30, 0x31, 0x23, 0x72, 0x75, 0x73, 0x1F, 0x1E, 0x39, 0x31,
                0x39, 0x23, 0x5E, 0x41, 0x72, 0x75, 0x73, 0x5E, 0x4E, 0x30,
                0x32, 0x5E, 0x4B, 0x50, 0x53, 0x42, 0x4F, 0x1F, 0x1E, 0x39,
                0x39, 0x39, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                0x1F, 0x1E
            };
        }

        [NotNull]
        private ServerResponse _GetResponse()
        {
            IIrbisConnection connection = new IrbisConnection();
            byte[] answer = _GetAnswer();
            byte[][] request = { _GetRequest() };
            ServerResponse result = new ServerResponse(connection, answer, request, false);

            return result;
        }

        [TestMethod]
        public void ServerResponse_Construction_1()
        {
            ServerResponse response = _GetResponse();
            Assert.AreEqual("H", response.CommandCode);
            Assert.IsNotNull(response.Connection);
            Assert.AreEqual(222884, response.ClientID);
            Assert.AreEqual(5, response.CommandNumber);
            Assert.AreEqual(1056, response.AnswerSize);
            Assert.AreEqual("", response.ServerVersion);
            Assert.AreEqual(-202, response.ReturnCode);
            Assert.IsNotNull(response.RawAnswer);
            Assert.IsNotNull(response.RawRequest);
            Assert.IsFalse(response.Relaxed);
        }

        [TestMethod]
        public void ServerResponse_Construction_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            byte[] answer = _GetAnswer();
            byte[][] request = { _GetRequest() };
            ServerResponse response = new ServerResponse(connection, answer, request, true);
            Assert.IsNull(response.CommandCode);
            Assert.IsNotNull(response.Connection);
            Assert.AreEqual(0, response.ClientID);
            Assert.AreEqual(0, response.CommandNumber);
            Assert.AreEqual(0, response.AnswerSize);
            Assert.IsNull(response.ServerVersion);
            Assert.AreEqual(0, response.ReturnCode);
            Assert.IsNotNull(response.RawAnswer);
            Assert.IsNotNull(response.RawRequest);
            Assert.IsTrue(response.Relaxed);
        }

        [TestMethod]
        public void ServerResponse_ReturnCode_1()
        {
            IIrbisConnection connection = new IrbisConnection();
            byte[] answer = _GetAnswer();
            byte[][] request = { _GetRequest() };
            ServerResponse response = new ServerResponse(connection, answer, request, true);
            response.ReturnCode = 100500;
            Assert.AreEqual(100500, response.ReturnCode);
        }

        [TestMethod]
        public void ServerResponse_GetAnsiString_1()
        {
            ServerResponse response = _GetResponse();
            string actual = response.GetAnsiString();
            Assert.AreEqual("-202", actual);
            actual = response.GetAnsiString();
            Assert.AreEqual("1#A=11", actual);
        }

        [TestMethod]
        public void ServerResponse_GetAnsiString_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            byte[] answer = { 72, 101, 108, 108, 111, 0x0D, 119, 111, 114, 108, 100, 0x0D, 0x0A };
            byte[][] request = { _GetRequest() };
            ServerResponse response = new ServerResponse(connection, answer, request, true);
            string expected = "Hello\rworld";
            string actual = response.GetAnsiString();
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void ServerResponse_GetAnsiStrings_1()
        {
            ServerResponse response = _GetResponse();
            string[] actual = response.GetAnsiStrings(10);
            Assert.IsNotNull(actual);
            Assert.AreEqual(10, actual.Length);
            actual = response.GetAnsiStrings(100);
            Assert.IsNull(actual);
        }

        [TestMethod]
        public void ServerResponse_GetAnsiStrings_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            ServerResponse response = ServerResponse.GetEmptyResponse(connection);
            string[] actual = response.GetAnsiStrings(10);
            Assert.IsNull(actual);
        }

        [TestMethod]
        public void ServerResponse_GetAnsiStringsPlus_1()
        {
            ServerResponse response = _GetResponse();
            string[] actual = response.GetAnsiStringsPlus(10);
            Assert.IsNotNull(actual);
            Assert.AreEqual(10, actual.Length);
            actual = response.GetAnsiStringsPlus(100);
            Assert.IsNotNull(actual);
        }

        [TestMethod]
        public void ServerResponse_GetAnsiStringsPlus_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            ServerResponse response = ServerResponse.GetEmptyResponse(connection);
            string[] actual = response.GetAnsiStringsPlus(10);
            Assert.IsNull(actual);
        }

        [TestMethod]
        public void ServerResponse_GetAnswerCopy_1()
        {
            ServerResponse response = _GetResponse();
            byte[] copy = response.GetAnswerCopy();
            Assert.AreEqual(1028, copy.Length);
        }

        [TestMethod]
        public void ServerResponse_GetAnswerCopy_2()
        {
            ServerResponse response = _GetResponse();
            byte[] copy = response.GetAnswerCopy(1056, 4);
            Assert.AreEqual(4, copy.Length);
            Assert.AreEqual(0x92, copy[0]);
            Assert.AreEqual(0x2E, copy[1]);
            Assert.AreEqual(0x0D, copy[2]);
            Assert.AreEqual(0x0A, copy[3]);
        }

        [TestMethod]
        public void ServerResponse_GetStream_1()
        {
            ServerResponse response = _GetResponse();
            Stream stream = response.GetStream();
            Assert.IsNotNull(stream);
        }

        [TestMethod]
        public void ServerResponse_GetStream_2()
        {
            ServerResponse response = _GetResponse();
            Stream stream = response.GetStream(1056, 4);
            Assert.IsNotNull(stream);
            byte[] bytes = stream.ReadToEnd();
            Assert.AreEqual(4, bytes.Length);
            Assert.AreEqual(0x92, bytes[0]);
            Assert.AreEqual(0x2E, bytes[1]);
            Assert.AreEqual(0x0D, bytes[2]);
            Assert.AreEqual(0x0A, bytes[3]);
        }

        [TestMethod]
        public void ServerResponse_GetDump_1()
        {
            ServerResponse response = _GetResponse();
            response.GetAnsiString();
            byte[] dump = response.GetDump();
            Assert.IsNotNull(dump);
            Assert.AreEqual(4, dump.Length);
        }

        [TestMethod]
        public void ServerResponse_GetDumpAsString_1()
        {
            ServerResponse response = _GetResponse();
            response.GetAnsiString();
            string dump = response.GetDumpAsString();
            Assert.IsNotNull(dump);
            Assert.AreEqual("2D 32 30 32", dump);
        }

        [TestMethod]
        public void ServerResponse_GetDumpAsString_2()
        {
            ServerResponse response = _GetResponse();
            response.GetAnsiStrings(15);
            string dump = response.GetDumpAsString().DosToUnix();
            Assert.IsNotNull(dump);
            Assert.AreEqual("32 23 41 3D 50 45 52 52 4F 4E 45 2C 20 50 41 55\n4C 20 4A 2E", dump);
        }

        [TestMethod]
        public void ServerResponse_GetEmptyResponse_1()
        {
            IIrbisConnection connection = new IrbisConnection();
            ServerResponse response = ServerResponse.GetEmptyResponse(connection);
            Assert.AreSame(connection, response.Connection);
            Assert.AreEqual(2, response.RawRequest.Length);
            Assert.AreEqual(0, response.RawRequest[0].Length);
            Assert.AreEqual(0, response.RawRequest[1].Length);
            Assert.AreEqual(0, response.RawAnswer.Length);
        }

        [TestMethod]
        public void ServerResponse_GetInt32_1()
        {
            ServerResponse response = _GetResponse();
            Assert.AreEqual(-202, response.GetInt32(-1));
            Assert.AreEqual(-1, response.GetInt32(-1));
        }

        [TestMethod]
        public void ServerResponse_GetReader_1()
        {
            ServerResponse response = _GetResponse();
            TextReader reader = response.GetReader(IrbisEncoding.Utf8);
            Assert.AreEqual("-202", reader.ReadLine());
            Assert.AreEqual("1#A=11", reader.ReadLine());
        }

        [TestMethod]
        public void ServerResponse_GetReaderCopy_1()
        {
            ServerResponse response = _GetResponse();
            TextReader reader = response.GetReaderCopy(IrbisEncoding.Utf8);
            Assert.AreEqual("-202", reader.ReadLine());
            Assert.AreEqual("1#A=11", reader.ReadLine());
        }

        [TestMethod]
        public void ServerResponse_GetRecord_1()
        {
            IIrbisConnection connection = new IrbisConnection();
            byte[] answer =
            {
                0x47, 0x0D, 0x0A, 0x32, 0x32, 0x32, 0x38, 0x38, 0x34, 0x0D,
                0x0A, 0x37, 0x30, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D,
                0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x0D, 0x0A, 0x30,
                0x0D, 0x0A, 0x32, 0x37, 0x38, 0x23, 0x30, 0x0D, 0x0A, 0x32,
                0x37, 0x38, 0x23, 0x30, 0x0D, 0x0A, 0x30, 0x23, 0x31, 0x0D,
                0x0A, 0x39, 0x32, 0x30, 0x23, 0x50, 0x41, 0x5A, 0x4B, 0x0D,
                0x0A, 0x39, 0x30, 0x30, 0x23, 0x5E, 0x42, 0x30, 0x35, 0x0D,
                0x0A, 0x31, 0x30, 0x32, 0x23, 0x52, 0x55, 0x0D, 0x0A, 0x31,
                0x30, 0x31, 0x23, 0x72, 0x75, 0x73, 0x0D, 0x0A, 0x39, 0x31,
                0x39, 0x23, 0x5E, 0x41, 0x72, 0x75, 0x73, 0x5E, 0x4E, 0x30,
                0x32, 0x5E, 0x4B, 0x50, 0x53, 0x42, 0x4F, 0x0D, 0x0A, 0x39,
                0x39, 0x39, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                0x0D, 0x0A, 0x37, 0x30, 0x30, 0x23, 0x5E, 0x41, 0xD0, 0xA1,
                0xD0, 0xBE, 0xD0, 0xBA, 0xD1, 0x83, 0xD1, 0x80, 0xD0, 0xBE,
                0xD0, 0xB2, 0x5E, 0x42, 0xD0, 0x90, 0x2E, 0x5E, 0x47, 0xD0,
                0x90, 0xD0, 0xBB, 0xD0, 0xB5, 0xD0, 0xBA, 0xD1, 0x81, 0xD0,
                0xB0, 0xD0, 0xBD, 0xD0, 0xB4, 0xD1, 0x80, 0x0D, 0x0A, 0x32,
                0x31, 0x35, 0x23, 0x5E, 0x41, 0x33, 0x31, 0x39, 0x5E, 0x31,
                0xD1, 0x81, 0x2E, 0x0D, 0x0A, 0x31, 0x30, 0x23, 0x5E, 0x41,
                0x39, 0x37, 0x38, 0x2D, 0x35, 0x2D, 0x33, 0x36, 0x37, 0x2D,
                0x30, 0x32, 0x30, 0x30, 0x32, 0x2D, 0x31, 0x0D, 0x0A, 0x32,
                0x31, 0x30, 0x23, 0x5E, 0x44, 0x32, 0x30, 0x31, 0x31, 0x5E,
                0x43, 0xD0, 0x90, 0xD0, 0xBC, 0xD1, 0x84, 0xD0, 0xBE, 0xD1,
                0x80, 0xD0, 0xB0, 0x5E, 0x41, 0xD0, 0xA1, 0xD0, 0x9F, 0xD0,
                0xB1, 0x2E, 0x0D, 0x0A, 0x39, 0x30, 0x37, 0x23, 0x5E, 0x43,
                0xD0, 0x9A, 0xD0, 0xA2, 0x5E, 0x41, 0x32, 0x30, 0x31, 0x31,
                0x30, 0x38, 0x30, 0x33, 0x5E, 0x42, 0x31, 0x0D, 0x0A, 0x39,
                0x30, 0x37, 0x23, 0x5E, 0x43, 0xD0, 0x9A, 0xD0, 0xA2, 0x5E,
                0x41, 0x32, 0x30, 0x31, 0x31, 0x30, 0x38, 0x30, 0x35, 0x5E,
                0x42, 0x31, 0x0D, 0x0A, 0x39, 0x30, 0x37, 0x23, 0x5E, 0x43,
                0xD0, 0x9A, 0xD0, 0xA2, 0x5E, 0x41, 0x32, 0x30, 0x31, 0x31,
                0x30, 0x38, 0x30, 0x39, 0x5E, 0x42, 0x31, 0x0D, 0x0A, 0x39,
                0x30, 0x37, 0x23, 0x5E, 0x43, 0xD0, 0x9A, 0xD0, 0xA2, 0x5E,
                0x41, 0x32, 0x30, 0x31, 0x31, 0x30, 0x38, 0x33, 0x30, 0x5E,
                0x42, 0x31, 0x0D, 0x0A, 0x36, 0x37, 0x35, 0x23, 0x38, 0x38,
                0x32, 0x0D, 0x0A, 0x32, 0x30, 0x30, 0x23, 0x5E, 0x41, 0xD0,
                0x92, 0x20, 0xD1, 0x86, 0xD0, 0xB5, 0xD0, 0xBD, 0xD1, 0x82,
                0xD1, 0x80, 0xD0, 0xB5, 0x20, 0xD0, 0xBE, 0xD0, 0xBA, 0xD0,
                0xB5, 0xD0, 0xB0, 0xD0, 0xBD, 0xD0, 0xB0, 0x5E, 0x46, 0xD0,
                0x90, 0x2E, 0x20, 0xD0, 0xA1, 0xD0, 0xBE, 0xD0, 0xBA, 0xD1,
                0x83, 0xD1, 0x80, 0xD0, 0xBE, 0xD0, 0xB2, 0x0D, 0x0A, 0x39,
                0x30, 0x37, 0x23, 0x5E, 0x43, 0xD0, 0x9A, 0xD0, 0xA2, 0x5E,
                0x41, 0x32, 0x30, 0x31, 0x31, 0x30, 0x39, 0x30, 0x31, 0x5E,
                0x42, 0x0D, 0x0A, 0x39, 0x30, 0x38, 0x23, 0xD0, 0xA1, 0x20,
                0x35, 0x39, 0x0D, 0x0A, 0x39, 0x30, 0x33, 0x23, 0x38, 0x38,
                0x32, 0x2F, 0xD0, 0xA1, 0x20, 0x35, 0x39, 0x2D, 0x37, 0x36,
                0x39, 0x37, 0x37, 0x37, 0x0D, 0x0A, 0x39, 0x31, 0x30, 0x23,
                0x5E, 0x41, 0x30, 0x5E, 0x42, 0x33, 0x35, 0x38, 0x35, 0x33,
                0x35, 0x36, 0x5E, 0x43, 0x32, 0x30, 0x31, 0x31, 0x30, 0x39,
                0x30, 0x31, 0x5E, 0x44, 0xD0, 0xA5, 0xD0, 0xA0, 0x0D, 0x0A
            };
            byte[][] request = { _GetRequest() };
            ServerResponse response = new ServerResponse(connection, answer, request, false);
            Assert.AreEqual(0, response.ReturnCode);
            MarcRecord record = new MarcRecord();
            Assert.IsNotNull(response.GetRecord(record));
            Assert.AreEqual(20, record.Fields.Count);
            Assert.IsNull(response.GetRecord(record));
        }

        [TestMethod]
        public void ServerResponse_GetReturnCode_1()
        {
            ServerResponse response = _GetResponse();
            Assert.AreEqual(-202, response.GetReturnCode());
            Assert.AreEqual(-202, response.GetReturnCode());
        }

        [TestMethod]
        public void ServerResponse_GetUtfString_1()
        {
            ServerResponse response = _GetResponse();
            Assert.AreEqual("-202", response.GetUtfString());
            Assert.AreEqual("1#A=11", response.GetUtfString());
        }

        [TestMethod]
        [ExpectedException(typeof(IrbisException))]
        public void ServerResponse_GetUtfString_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            byte[] answer = { 0xC1, 0xC1, 0xC1, 0xC1, 0x0D, 0x0A };
            byte[][] request = { _GetRequest() };
            ServerResponse response = new ServerResponse(connection, answer, request, true);
            response.GetUtfString();
        }

        [TestMethod]
        public void ServerResponse_GetUtfString_3()
        {
            IIrbisConnection connection = new IrbisConnection();
            byte[] answer = { 72, 101, 108, 108, 111, 0x0D, 119, 111, 114, 108, 100, 0x0D, 0x0A };
            byte[][] request = { _GetRequest() };
            ServerResponse response = new ServerResponse(connection, answer, request, true);
            string expected = "Hello\rworld";
            string actual = response.GetUtfString();
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void ServerResponse_GetUtfStrings_1()
        {
            ServerResponse response = _GetResponse();
            string[] actual = response.GetUtfStrings(10);
            Assert.IsNotNull(actual);
            Assert.AreEqual(10, actual.Length);
            actual = response.GetUtfStrings(100);
            Assert.IsNull(actual);
        }

        [TestMethod]
        public void ServerResponse_RefuseAnReturnCode_1()
        {
            ServerResponse response = _GetResponse();
            response.RefuseAnReturnCode();
            Assert.AreEqual(0, response.ReturnCode);
        }

        [TestMethod]
        public void ServerResponse_RemainingAnsiStrings_1()
        {
            ServerResponse response = _GetResponse();
            List<string> list = response.RemainingAnsiStrings();
            Assert.AreEqual(37, list.Count);
        }

        [TestMethod]
        public void ServerResponse_RemainingAnsiText_1()
        {
            ServerResponse response = _GetResponse();
            string text = response.RemainingAnsiText();
            Assert.IsNotNull(text);
            Assert.AreEqual(1028, text.Length);
        }

        [TestMethod]
        public void ServerResponse_RemainingUtfStrings_1()
        {
            ServerResponse response = _GetResponse();
            List<string> list = response.RemainingUtfStrings();
            Assert.AreEqual(37, list.Count);
        }

        [TestMethod]
        public void ServerResponse_RemainingUtfText_1()
        {
            ServerResponse response = _GetResponse();
            string text = response.RemainingUtfText();
            Assert.IsNotNull(text);
            Assert.AreEqual(800, text.Length);
        }

        [TestMethod]
        public void ServerResponse_GetRemainingLength_1()
        {
            ServerResponse response = _GetResponse();
            Assert.AreEqual(1028, response.GetRemainingLength());
        }

        [TestMethod]
        public void ServerResponse_PeekRemainingUtf8_1()
        {
            ServerResponse response = _GetResponse();
            string text = response.PeekRemainingUtf8();
            Assert.IsNotNull(text);
            Assert.AreEqual(800, text.Length);
        }

        [TestMethod]
        public void ServerResponse_RequireAnsiString_1()
        {
            ServerResponse response = _GetResponse();
            Assert.IsNotNull(response.RequireAnsiString());
        }

        [TestMethod]
        [ExpectedException(typeof(IrbisNetworkException))]
        public void ServerResponse_RequireAnsiString_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            ServerResponse response = ServerResponse.GetEmptyResponse(connection);
            response.RequireAnsiString();
        }

        [TestMethod]
        public void ServerResponse_RequireUtfString_1()
        {
            ServerResponse response = _GetResponse();
            Assert.IsNotNull(response.RequireUtfString());
        }

        [TestMethod]
        [ExpectedException(typeof(IrbisNetworkException))]
        public void ServerResponse_RequireUtfString_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            ServerResponse response = ServerResponse.GetEmptyResponse(connection);
            response.RequireUtfString();
        }

        [TestMethod]
        public void ServerResponse_RequireInt32_1()
        {
            ServerResponse response = _GetResponse();
            Assert.AreEqual(-202, response.RequireInt32());
        }

        [TestMethod]
        [ExpectedException(typeof(IrbisNetworkException))]
        public void ServerResponse_RequireInt32_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            ServerResponse response = ServerResponse.GetEmptyResponse(connection);
            response.RequireInt32();
        }

        [TestMethod]
        public void ServerResponse_Verify_1()
        {
            ServerResponse response = _GetResponse();
            Assert.IsTrue(response.Verify(false));
        }

        [TestMethod]
        public void ServerResponse_Verify_2()
        {
            IIrbisConnection connection = new IrbisConnection();
            ServerResponse response = ServerResponse.GetEmptyResponse(connection);
            Assert.IsTrue(response.Verify(false));
        }
    }
}
